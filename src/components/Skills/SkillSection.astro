---
import { Icon } from 'astro-icon/components';
import skillsBlock from '../../utils/skillsBlock.json';
import SkillsBlock from './SkillsBlock.astro';
import Loadingdots from '../../utils/Loadingdots.astro';
---

<section id='skills' class='skills-section'>
  <div class='skills-wrapper'>
    <div class='skills-theme-pointer'><Icon name='laptop' />Skills</div>
    <h2 class='skills-header'>&lt; /Skills &gt</h2>
    <h3 class='skills-quote title'>
      " If You Are Going Through Hell, Keep Going "
    </h3>
    <h4 class='skills-quote author'>Winston Churchill</h4>

    <div class='skills-container'>
      {
        skillsBlock.map((block) => (
          <SkillsBlock title={block.title} skills={block.skills} />
        ))
      }
    </div>

    <Loadingdots />
  </div>
</section>

<style>
  .skills-section {
    position: relative;
    padding: 20px 20px 80px 20px;
    color: var(--wh);
    overflow: hidden;
  }
  .skills-section::after {
    position: absolute;
    z-index: -1;
    content: '';
    bottom: -1%;
    height: 15%;
    width: 85%;
    left: 9%;
    background-image: radial-gradient(
      circle,
      rgb(60, 231, 126) 0%,
      rgb(42, 82, 56) 82%
    );
    -webkit-mask-image: radial-gradient(rgba(0, 0, 0, 0.3), transparent 10%);
    mask-image: radial-gradient(rgba(0, 0, 0, 0.6), transparent 70%);
  }
  .skills-wrapper {
    padding-top: 80px;
    max-width: 1440px;
    margin: 0 auto;
    position: relative;
  }
  .skills-theme-pointer {
    display: flex;
    border: 1px solid var(--green);
    width: fit-content;
    padding: 3px 10px;
    border-radius: 7px;
    gap: 5px;
    color: var(--green);
    font-family: var(--second-font);
  }
  .skills-header {
    font-size: 2rem;
    margin-top: 20px;
    margin-bottom: 20px;
    font-family: var(--main-font);
  }
  .skills-quote {
    margin-block-start: 1.3em;
    color: var(--light-grey);
    font-family: var(--second-font);
    font-style: italic;
  }
  .title {
    font-size: clamp(1.4rem, 2.2vw, 2.4rem);
    text-wrap: balance;
  }
  .author {
    color: var(--light-grey);
    font-size: clamp(0.8rem, 1.2rem, 1.5rem);
    width: 100%;
  }
  .skills-container {
    margin-top: 80px;
    display: flex;
    flex-wrap: wrap;
    column-gap: 80px;
  }
  @media (min-width: 900px) {
    .skills-wrapper {
      text-align: center;
    }
    .skills-theme-pointer {
      margin: 0 auto;
    }
    .author {
      margin-right: 100px;
      text-align: right;
    }
    .skills-container {
      margin: 120px auto 0 auto;
      display: flex;
      max-width: 1240px;
      column-gap: 80px;
      flex-wrap: wrap;
      position: relative;
      justify-content: center;
      align-items: flex-start;
    }
    .skills-container::after {
      content: '';
      background-image: url('../../assets/about-bg2.webp');
      background-repeat: no-repeat;
      background-position: center;
      transform: rotate(90deg);
      width: 100%;
      position: absolute;
      left: -60%;
      top: 0%;
      height: 100%;
      z-index: 0;
      opacity: 0.1;
    }
    .skills-container::before {
      content: '';
      background-image: url('../../assets/about-bg2.webp');
      background-repeat: no-repeat;
      background-position: center;
      transform: rotate(-90deg);
      width: 100%;
      position: absolute;
      right: -60%;
      top: 0%;
      height: 100%;
      z-index: 0;
      opacity: 0.1;
    }
    .skills-section::after {
      background: none;
    }
    .skills-section::before {
      content: '';
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: radial-gradient(2500px
        circle at var(--x) var(--y),
        #059960 0%,
        #1a1c20 10%
      );
      opacity: 0.2;
      pointer-events: none;
    }
    .skills-section.hide-before::before {
      display: none;
    }
  }
</style>

<script>
  const mouseMove = (wrapper:HTMLElement, e: MouseEvent) => {
    const x = e.clientX - wrapper.getBoundingClientRect().left;
    const y = e.clientY - wrapper.getBoundingClientRect().top;

    wrapper.style.setProperty('--x', `${x}px`);
    wrapper.style.setProperty('--y', `${y}px`);
  }

  const resetHoverEffect = (wrapper:HTMLElement) => {
    wrapper.classList.add('hide-before');
  };

  const showHoverEffect = (wrapper:HTMLElement) => {
    wrapper.classList.remove('hide-before');
  };

  const skillsSection = document.querySelector('.skills-section');
  if (skillsSection instanceof HTMLElement) {
    skillsSection.addEventListener('mousemove', (e) => {
      showHoverEffect(skillsSection);
      mouseMove(skillsSection, e);
      skillsSection.style.cursor='none'
    });
    skillsSection.addEventListener('mouseleave', () =>
      resetHoverEffect(skillsSection),
    );
  }
</script>
